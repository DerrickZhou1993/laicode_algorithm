From ef297c0531a27f7df20c2bcf1f9a3c3f7a3ae112 Mon Sep 17 00:00:00 2001
From: Fei Shen <shenfei2031@gmail.com>
Date: Sat, 1 Jul 2017 17:55:47 -0500
Subject: [PATCH] 2017.07.01

---
 laicode_java/src/laicode_java/Solution115.java | 10 ++-
 laicode_java/src/laicode_java/Solution116.java | 97 ++++++++++++--------------
 laicode_java/src/laicode_java/Solution117.java | 24 +++++--
 laicode_java/src/laicode_java/Solution120.java | 69 +++++++++---------
 laicode_java/src/laicode_java/Solution121.java |  7 +-
 laicode_java/src/laicode_java/Solution128.java |  7 +-
 laicode_java/src/laicode_java/Solution129.java |  2 +-
 laicode_java/src/laicode_java/Solution130.java | 11 ++-
 laicode_java/src/laicode_java/Solution131.java |  8 ++-
 laicode_java/src/laicode_java/Solution132.java |  3 +
 laicode_java/src/laicode_java/Solution142.java |  1 +
 laicode_java/src/laicode_java/Solution144.java |  4 +-
 laicode_java/src/laicode_java/Solution154.java | 80 ++++++++++++---------
 laicode_java/src/laicode_java/Solution155.java | 72 +++++++++++++++++--
 14 files changed, 252 insertions(+), 143 deletions(-)

diff --git a/laicode_java/src/laicode_java/Solution115.java b/laicode_java/src/laicode_java/Solution115.java
index 8bca0e2..8dadbb5 100644
--- a/laicode_java/src/laicode_java/Solution115.java
+++ b/laicode_java/src/laicode_java/Solution115.java
@@ -20,12 +20,12 @@ public class Solution115 {
 		int amid=ai+k/2-1;
 		int bmid=bi+k/2-1;
 		int aval=amid>=a.length?Integer.MAX_VALUE:a[amid];
-		int bval=bmid>=b.length?Integer.MIN_VALUE:b[bmid];
-		if(aval<=bval) {
+		int bval=bmid>=b.length?Integer.MAX_VALUE:b[bmid];
+		if(aval<bval) {
 			return helper(a, amid+1, b, bi, k-k/2);
 		}
 		else {
-			return helper(a, bi, b, bmid+1, k-k/2);
+			return helper(a, ai, b, bmid+1, k-k/2);
 		}
 	}
 	
@@ -35,5 +35,9 @@ public class Solution115 {
 		int[] b={2, 3};
 		int result=s115.kth(a, b, 3);
 		System.out.println(result);
+		a=new int[]{1,2,3,4};
+		b=new int[]{5};
+		result=s115.kth(a, b, 5);
+		System.out.println(result);
 	}
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution116.java b/laicode_java/src/laicode_java/Solution116.java
index 7262245..41c8a67 100644
--- a/laicode_java/src/laicode_java/Solution116.java
+++ b/laicode_java/src/laicode_java/Solution116.java
@@ -1,69 +1,54 @@
 package laicode_java;
 import java.util.*;
 
-//Median of two arrays
+//Median Of Two Arrays
+//Given two arrays of integers, find the median value.
+//
+//Assumptions
+//
+//The two given array are not null and at least one of them is not empty
+//The two given array are not guaranteed to be sorted
+//Examples
+//
+//A = {4, 1, 6}, B = {2, 3}, median is 3
+//A = {1, 4}, B = {3, 2}, median is 2.5
 public class Solution116 {
-	private PriorityQueue<Integer> maxHeap;
-	private PriorityQueue<Integer> minHeap;
 	
-	public Solution116() {
-		maxHeap=new PriorityQueue<Integer>();
-		minHeap=new PriorityQueue<Integer>(11, Collections.reverseOrder());
+	public double median(int[] a, int[] b) {
+		Arrays.sort(a);
+		Arrays.sort(b);
+		int total=a.length+b.length;
+	    if(total%2!=0) {
+	    	return findKth(a, 0, b, 0, total/2+1);
+	    }
+	    else {
+	    	return (findKth(a, 0, b, 0, total/2) + 
+	    			findKth(a, 0, b, 0, total/2+1))/2.0;
+	    }
 	}
 	
-	public double median(int[] a, int[] b) {
-		for(int i=0;i<a.length;i++) {
-			if(maxHeap.size()>minHeap.size()) {
-	            if(a[i]>=maxHeap.peek()) {
-	            	minHeap.offer(a[i]);
-	            }
-	            else {
-	            	minHeap.offer(maxHeap.poll());
-	                maxHeap.offer(a[i]);
-	            }
-	        }
-	        else if(maxHeap.size()==minHeap.size()){
-	            if(maxHeap.size()==0 || a[i]<=minHeap.peek()) {
-	            	maxHeap.offer(a[i]);
-	            }
-	            else {
-	            	maxHeap.offer(minHeap.poll());
-	            	minHeap.offer(a[i]);
-	            }
-	        }
+	private double findKth(int[] a, int ai, int[] b, int bi, int k) {
+		if(ai>=a.length) {
+			return b[bi+k-1];
 		}
-		for(int i=0;i<b.length;i++) {
-			if(maxHeap.size()>minHeap.size()) {
-	            if(b[i]>=maxHeap.peek()) {
-	            	minHeap.offer(b[i]);
-	            }
-	            else {
-	            	minHeap.offer(maxHeap.poll());
-	                maxHeap.offer(b[i]);
-	            }
-	        }
-	        else if(maxHeap.size()==minHeap.size()){
-	            if(maxHeap.size()==0 || b[i]<=minHeap.peek()) {
-	            	maxHeap.offer(b[i]);
-	            }
-	            else {
-	            	maxHeap.offer(minHeap.poll());
-	            	minHeap.offer(b[i]);
-	            }
-	        }
+		if(bi>=b.length) {
+			return a[ai+k-1];
 		}
-		int size=maxHeap.size()+minHeap.size();
-		if(size==0) {
-			return 0.0; 
+		if(k==1) {
+			return Math.min(a[ai], b[bi]);
 		}
-		else if(size%2!=0) {
-			return (double)(maxHeap.peek());
+		int amid=ai+k/2-1;
+		int bmid=bi+k/2-1;
+		int aval=amid>=a.length?Integer.MAX_VALUE:a[amid];
+		int bval=bmid>=b.length?Integer.MAX_VALUE:b[bmid];
+		if(aval<=bval) {
+			return findKth(a, amid+1, b, bi, k-k/2);
 		}
 		else {
-			return (double)(maxHeap.peek()+minHeap.peek())/2.0;
+			return findKth(a, ai, b,  bmid+1, k-k/2);
 		}
+		
 	}
-	
 	public static void main(String[] args) {
 		Solution116 s116 = new Solution116();
 		int[] a={4,1,6};
@@ -72,5 +57,13 @@ public class Solution116 {
 		b=new int[]{3,2};
 		double result=s116.median(a, b);
 		System.out.println(result);
+		a=new int[]{3,4,2};
+		b=new int[]{9,11,8};
+		result=s116.median(a, b);
+		System.out.println(result);
+		a=new int[]{4,2,6,4,1,1};
+		b=new int[]{9,2,1,5,3};
+		result=s116.median(a, b);
+		System.out.println(result);
 	}
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution117.java b/laicode_java/src/laicode_java/Solution117.java
index 8238319..e87a216 100644
--- a/laicode_java/src/laicode_java/Solution117.java
+++ b/laicode_java/src/laicode_java/Solution117.java
@@ -1,16 +1,29 @@
 package laicode_java;
 import java.util.*;
 
-//Maximum values of size K sliding windows
+//Maximum Values Of Size K Sliding Windows
+//Given an integer array A and a sliding window of size K, find the maximum value of each window as it slides from left to right.
+//
+//Assumptions
+//
+//The given array is not null and is not empty
+//
+//K >= 1, K <= A.length
+//
+//Examples
+//
+//A = {1, 2, 3, 2, 4, 2, 1}, K = 3, the windows are {{1,2,3}, {2,3,2}, {3,2,4}, {2,4,2}, {4,2,1}},
+//
+//and the maximum values of each K-sized sliding window are [3, 3, 4, 4, 4]
 public class Solution117 {
 	public List<Integer> maxWindows(int[] array, int k) {
 		List<Integer> max=new ArrayList<Integer>();
 		Deque<Integer> deque=new LinkedList<Integer>();
 		for(int i=0;i<array.length;i++) {
-			while(!deque.isEmpty() && array[deque.peekFirst()]<=array[i]) {
-				deque.pollFirst();
+			while(!deque.isEmpty() && array[deque.peekLast()]<=array[i]) {
+				deque.pollLast();
 			}
-			if(!deque.isEmpty() && deque.peekFirst()<=i-k) {
+			while(!deque.isEmpty() && deque.peekFirst()<=i-k) {
 				deque.pollFirst();
 			}
 			deque.offer(i);
@@ -26,5 +39,8 @@ public class Solution117 {
 		int[] array={1, 2, 3, 2, 4, 2, 1};
 		List<Integer> result=s117.maxWindows(array, 3);
 		System.out.println(result);
+		array=new int[]{2,1,3,6,2,3,2,4,1,5,2,7,6,8,1,4};
+		result=s117.maxWindows(array, 3);
+		System.out.println(result);
 	}
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution120.java b/laicode_java/src/laicode_java/Solution120.java
index 00949b3..ecbbf1b 100644
--- a/laicode_java/src/laicode_java/Solution120.java
+++ b/laicode_java/src/laicode_java/Solution120.java
@@ -7,51 +7,50 @@ public class Solution120 {
 	int asize=a.length();
 	int bsize=b.length();
 	int csize=c.length();
-	int bj=0, ck=0;
-	char[] alist=a.toCharArray();
-	char[] blist=b.toCharArray();
-	char[] clist=c.toCharArray();
-	for(int i=0;i<asize;) {
-		if(bj<bsize && alist[i]==blist[bj]) {
-			i++;
-			bj++;
+	if(asize+bsize!=csize) {
+		return false;
+	}
+	boolean[][] interleaved=new boolean[asize+1][bsize+1];
+	interleaved[0][0]=true;
+	for(int i=1;i<=asize;i++) {
+		if(c.charAt(i-1)==a.charAt(i-1) && interleaved[i-1][0]) {
+			interleaved[i][0]=true;
 		}
-		else if(ck<csize && alist[i]==clist[ck]) {
-			i++;
-			ck++;
+	}
+	for(int i=1;i<=bsize;i++) {
+		if(c.charAt(i-1)==b.charAt(i-1) && interleaved[0][i-1]) {
+			interleaved[0][i]=true;
 		}
-		else {
-			return false;
+	}
+	for(int i=1;i<=asize;i++) {
+		for(int j=1;j<=bsize;j++) {
+			if((c.charAt(i+j-1)==a.charAt(i-1) && interleaved[i-1][j]) || 
+			(c.charAt(i+j-1)==b.charAt(j-1) && interleaved[i][j-1])) {
+				interleaved[i][j]=true;
+			}
 		}
 	}
-    if(bj==bsize && ck==csize) {
-    	return true;
-    }
-    else {
-    	return false;
-    }
+//	for(int i=0;i<=asize;i++) {
+//		for(int j=0;j<=bsize;j++) {
+//			if(interleaved[i][j]) {
+//				System.out.print(1+" ");
+//			}
+//			else {
+//
+//				System.out.print(0+" ");
+//			}
+//		}
+//		System.out.println();
+//	}
+	return interleaved[asize][bsize];
   }
   
   public static void main(String[] args) {
 
 	  Solution120 s120 = new Solution120();
-	  String A="abcde";
-	  String B="acd";
-	  String C="be";
-	  B="adc";
-	  boolean result=s120.canMerge(A, B, C);
-	  System.out.println(result);
-	  result=s120.canMerge("XXZXXXY", "XXY", "XXZ");
-	  System.out.println(result);
-	  result=s120.canMerge("XXXXXX", "XXX", "XXX");
-	  System.out.println(result);
-	  result=s120.canMerge("WZXY","XY" ,"WZ" );
-	  System.out.println(result);
-	  result=s120.canMerge("XXY", "XY", "X");
-	  System.out.println(result);
-	  result=s120.canMerge("XXY", "YX", "X");
+	  boolean result=s120.canMerge("a", "b", "ba");
 	  System.out.println(result);
-	  result=s120.canMerge("XXXXZY", "XXY", "XXZ");
+	  result=s120.canMerge("ab", "ac", "acab");
 	  System.out.println(result);
   }
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution121.java b/laicode_java/src/laicode_java/Solution121.java
index b8b25a4..e1ccfcf 100644
--- a/laicode_java/src/laicode_java/Solution121.java
+++ b/laicode_java/src/laicode_java/Solution121.java
@@ -19,8 +19,9 @@ public class Solution121 {
 				if(array[start-1]==array[end-1]) {
 					isP[start][end]=end-start<2||isP[start+1][end-1];
 				}
-				if(isP[start][end] && end-start>dist) {
+				if(isP[start][end] && end-start>=dist) {
 					result=s.substring(start-1, end);
+					dist=end-start;
 				}
 			}
 		}
@@ -29,7 +30,9 @@ public class Solution121 {
 	
 	public static void main(String[] args) {
 		Solution121 s121 = new Solution121();
-		String result=s121.longestPalindrome("abbc");
+		String result=s121.longestPalindrome("abacbbcabcb");
+		System.out.println(result);
+		result=s121.longestPalindrome("a");
 		System.out.println(result);
 	}
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution128.java b/laicode_java/src/laicode_java/Solution128.java
index 4b31459..ba66dc9 100644
--- a/laicode_java/src/laicode_java/Solution128.java
+++ b/laicode_java/src/laicode_java/Solution128.java
@@ -1,7 +1,7 @@
 package laicode_java;
 import java.util.*;
 
-//Generate random maza
+//Generate random maze
 public class Solution128 {
 	public int[][] maze(int n) {
 		int[][] result=new int[n][n];
@@ -48,7 +48,7 @@ public class Solution128 {
 	
 	public static void main(String[] args) {
 		Solution128 s128 = new Solution128();
-		int[][] result=s128.maze(5);
+		int[][] result=s128.maze(4);
 		for(int i = 0; i < result.length; i++) {
 		      for(int j = 0; j < result[0].length; j++)
 		      {
@@ -60,7 +60,8 @@ public class Solution128 {
 }
 
 enum Dir {
-	NORTH(0, 1), SOUTH(0, -1), EAST(1, 0), WEST(-1, 0);
+//	NORTH(0, 1), SOUTH(0, -1), EAST(1, 0), WEST(-1, 0);
+	NORTH(-1, 0), SOUTH(1, 0), EAST(0, -1), WEST(0, 1);
 	int dx, dy;
 	Dir(int dx, int dy) {
 		this.dx=dx;
diff --git a/laicode_java/src/laicode_java/Solution129.java b/laicode_java/src/laicode_java/Solution129.java
index 56e16cd..d45e2b7 100644
--- a/laicode_java/src/laicode_java/Solution129.java
+++ b/laicode_java/src/laicode_java/Solution129.java
@@ -22,7 +22,7 @@ public class Solution129 {
 			int mid=left+(right-left)/2;
 			int realmid=(mid+shift)%array.length;
 			if(array[realmid]==target) {
-				return mid;
+				return realmid;
 			}
 			else if(array[realmid]>target) {
 				right=mid-1;
diff --git a/laicode_java/src/laicode_java/Solution130.java b/laicode_java/src/laicode_java/Solution130.java
index a8a8d16..063ddbd 100644
--- a/laicode_java/src/laicode_java/Solution130.java
+++ b/laicode_java/src/laicode_java/Solution130.java
@@ -4,8 +4,12 @@ import java.util.*;
 //Search In Shifted Sorted Array II
 public class Solution130 {
 	public int search(int[] array, int target) {
-		int left=0, right=array.length-1;
-		while(left<right) {
+	    int leng=array.length;
+	    if(leng<=0) {
+	    	return -1;
+	    }
+		int left=0, right=leng-1;
+		while(left<=right) {
 			int mid=left+(right-left)/2;
 			if(array[mid]==target) {
 				return mid;
@@ -29,6 +33,7 @@ public class Solution130 {
 				}
 			}
 			else {
+				//array[mid]=array[left], 3, 3, 3, 1, 2  
 				left++;
 			}
 		}
@@ -37,7 +42,7 @@ public class Solution130 {
 	
 	public static void main(String[] args) {
 		Solution130 s130 = new Solution130();
-		int[] array= {3, 3, 3, 1, 3};
+		int[] array= {1};
 		int result=s130.search(array, 1);
 		System.out.println(result);
 	}
diff --git a/laicode_java/src/laicode_java/Solution131.java b/laicode_java/src/laicode_java/Solution131.java
index 540d7bc..eecff74 100644
--- a/laicode_java/src/laicode_java/Solution131.java
+++ b/laicode_java/src/laicode_java/Solution131.java
@@ -3,6 +3,9 @@ package laicode_java;
 //Shift Position
 public class Solution131 {
 	public int shiftPosition(int[] array) {
+		if(array.length<=0) {
+			return -1;
+		}
 		int left=0, right=array.length-1;
 		while(left<right) {
 			int mid=left+(right-left)/2;
@@ -10,7 +13,7 @@ public class Solution131 {
 				left=mid+1;
 			}
 			else {
-				right=mid-1;
+				right=mid;
 			}
 		}
 		return left;
@@ -24,5 +27,8 @@ public class Solution131 {
 		array=new int[]{1,2,3,4,5};
 		result=s131.shiftPosition(array);
 		System.out.println(result);
+		array=new int[]{4,1,2,3};
+		result=s131.shiftPosition(array);
+		System.out.println(result);
 	}
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution132.java b/laicode_java/src/laicode_java/Solution132.java
index 0c3daf9..12a6d11 100644
--- a/laicode_java/src/laicode_java/Solution132.java
+++ b/laicode_java/src/laicode_java/Solution132.java
@@ -3,6 +3,9 @@ package laicode_java;
 //Total Occurrence
 public class Solution132 {
 	public int totalOccurrence(int[] array, int target) {
+		if(array.length<=0) {
+			return 0;
+		}
 		int left=0, right=array.length-1;
 		int first=-1, last=-1;
 		while(left<right-1) {
diff --git a/laicode_java/src/laicode_java/Solution142.java b/laicode_java/src/laicode_java/Solution142.java
index 568ad0d..ff23e53 100644
--- a/laicode_java/src/laicode_java/Solution142.java
+++ b/laicode_java/src/laicode_java/Solution142.java
@@ -28,6 +28,7 @@ public class Solution142 {
 					result.add(b.get(i));
 				}
 			}
+			Collections.sort(result);
 			return result;
 		}
 	}
diff --git a/laicode_java/src/laicode_java/Solution144.java b/laicode_java/src/laicode_java/Solution144.java
index 459c1d0..f350cb6 100644
--- a/laicode_java/src/laicode_java/Solution144.java
+++ b/laicode_java/src/laicode_java/Solution144.java
@@ -19,7 +19,7 @@ public class Solution144 {
 		for(int i=0;i<array.length;i++) {
 			int aa=array[i]%32;
 			int bb=array[i]/32;
-			if(dict[bb]>>aa > 0) {
+			if((dict[bb] & (1 << aa)) > 0) {
 				return false;
 			}
 			dict[bb]|=1<<aa;
@@ -33,7 +33,7 @@ public class Solution144 {
 		System.out.println(result);
 		result=s144.allUnique("aba");
 		System.out.println(result);
-		result=s144.allUnique("ac");
+		result=s144.allUnique("bcdkowa");
 		System.out.println(result);
 	}
 }
\ No newline at end of file
diff --git a/laicode_java/src/laicode_java/Solution154.java b/laicode_java/src/laicode_java/Solution154.java
index b19273c..c01c8a5 100644
--- a/laicode_java/src/laicode_java/Solution154.java
+++ b/laicode_java/src/laicode_java/Solution154.java
@@ -12,40 +12,54 @@ package laicode_java;
 
 public class Solution154 {
 	public double largestProduct(double[] array) {
-	    int leng=array.length;
-	    if(leng==0) {
-	    	return 0;
-	    }
-	    else if(leng==1) {
-	    	return array[0];
-	    }
-	    else if(leng==2) {
-	    	return Math.max(array[0]*array[1], Math.max(array[0], array[1]));
-	    }
-	    else {
-	//    	  0 2.0
-	//    	  1 -0.1
-	//    	  2 4
-	//    	  3 1.6
-	//    	  4 12
-	    	double resultmax=Double.MIN_VALUE;
-	    	for(int i=0;i<leng;i++) {
-	    		double loopmax=array[i];
-	    		double current=array[i];
-	    		resultmax=Math.max(resultmax, current);
-	    		for(int j=i;j>=0;j--) {
-	    			if(j==i) {
-	    				continue;
-	    			}
-	    			else {
-	    				current=current*array[j];
-	    				loopmax=Math.max(current, loopmax);
-	    				resultmax=Math.max(resultmax, loopmax);
-	    			}
-	    		}
-	    	}
-	    	return resultmax;
+//	    int leng=array.length;
+//	    if(leng==0) {
+//	    	return 0;
+//	    }
+//	    else if(leng==1) {
+//	    	return array[0];
+//	    }
+//	    else if(leng==2) {
+//	    	return Math.max(array[0]*array[1], Math.max(array[0], array[1]));
+//	    }
+//	    else {
+//	//    	  0 2.0
+//	//    	  1 -0.1
+//	//    	  2 4
+//	//    	  3 1.6
+//	//    	  4 12
+//	    	double resultmax=Double.MIN_VALUE;
+//	    	for(int i=0;i<leng;i++) {
+//	    		double loopmax=array[i];
+//	    		double current=array[i];
+//	    		resultmax=Math.max(resultmax, current);
+//	    		for(int j=i;j>=0;j--) {
+//	    			if(j==i) {
+//	    				continue;
+//	    			}
+//	    			else {
+//	    				current=current*array[j];
+//	    				loopmax=Math.max(current, loopmax);
+//	    				resultmax=Math.max(resultmax, loopmax);
+//	    			}
+//	    		}
+//	    	}
+//	    	return resultmax;
+//		}
+		if(array==null || array.length==0) {
+			return 0;
 		}
+		double maxProduct=array[0];
+		double maxTemp=array[0];
+		double minTemp=array[0];
+		for(int i=1;i<array.length;i++) {
+			double a=maxTemp*array[i];
+			double b=minTemp*array[i];
+			maxTemp=Math.max(array[i], Math.max(a, b));
+			minTemp=Math.min(array[i], Math.min(a, b));
+			maxProduct=Math.max(maxProduct, maxTemp);
+		}
+		return maxProduct;
 	}
   
 	public static void main(String[] args) {
diff --git a/laicode_java/src/laicode_java/Solution155.java b/laicode_java/src/laicode_java/Solution155.java
index b3e2a1e..3618481 100644
--- a/laicode_java/src/laicode_java/Solution155.java
+++ b/laicode_java/src/laicode_java/Solution155.java
@@ -1,5 +1,7 @@
 package laicode_java;
 
+import java.util.Arrays;
+
 //Largest Rectangle Of 1s
 //Determine the largest rectangle of 1s in a binary matrix (a binary matrix only contains 0 and 1), return the area.
 //
@@ -19,8 +21,70 @@ package laicode_java;
 //the largest rectangle of 1s has area of 2 * 3 = 6
 
 public class Solution155 {
-	  public int largest(int[][] matrix) {
-	    // write your solution here
-	    return 0;
-	  }
+	public int largest(int[][] matrix) {
+		if(matrix==null || matrix.length==0) {
+			return 0;
+		}
+		int result=0, m=matrix.length, n=matrix[0].length;
+		int[] left=new int[n];
+		int[] right=new int[n];
+		int[] height=new int[n];
+		Arrays.fill(left, 0);
+		Arrays.fill(right, n);
+		Arrays.fill(height, 0);
+		for(int i=0;i<m;i++) {
+			int curleft=0, curright=n;
+			for(int j=0;j<n;j++) {
+				if(matrix[i][j]==1) {
+					height[j]++;
+				}
+				else {
+					height[j]=0;
+				}
+			}
+			for(int j=0;j<n;j++) {
+				if(matrix[i][j]==1) {
+					left[j]=Math.max(curleft, left[j]);
+				}
+				else {
+					left[j]=0;curleft=j+1;
+				}
+			}
+			for(int j=n-1;j>=0;j--) {
+				if(matrix[i][j]==1) {
+					right[j]=Math.min(right[j], curright);
+				}
+				else {
+					right[j]=n;curright=j;
+				}
+			}
+			for(int j=0;j<n;j++) {
+				result=Math.max(result, (right[j]-left[j])*height[j]);
+			}
+		}
+		return result;
+	}
+	
+	public static void main(String[] args) {
+		Solution155 s155 = new Solution155();
+		int[][] matrix = new int[][]{ {0, 0, 1, 0} };
+		int result=s155.largest(matrix);
+		System.out.println(result);
+		matrix = new int[][]{ {0}, {1}, {1}, {0}};
+		result=s155.largest(matrix);
+		System.out.println(result);
+		matrix = new int[][]{	{0, 0, 0, 0},
+								{1, 1, 1, 1},
+								{0, 1, 1, 1},
+								{1, 0, 1, 1}	};
+		result=s155.largest(matrix);
+		System.out.println(result);
+		matrix = new int[][]{{0,1,1,1},
+							 {1,1,0,1},
+							 {0,1,0,1},
+							 {1,1,1,1}};
+		result=s155.largest(matrix);
+		System.out.println(result);
+
 	}
+}
-- 
2.10.1

